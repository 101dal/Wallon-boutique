<style>
    /* Style global */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: var(--background);
        margin: 0;
        padding: 0;
    }

    .products-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    /* Sections d'ajout et de liste */
    .add-product,
    .product-list {
        background: var(--card-bg);
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 8px var(--shadow);
        margin-bottom: 2rem;
    }

    .add-product h2,
    .product-list h2 {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--accent);
        font-size: 1.8rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid var(--accent);
        padding-bottom: 0.5rem;
    }

    /* Formulaire d'ajout de produit */
    .add-product form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .add-product label {
        font-weight: 600;
        color: var(--text);
    }

    .add-product input,
    .add-product textarea,
    .add-product select {
        padding: 0.8rem;
        border: 1px solid var(--border);
        border-radius: 5px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

    .add-product input:focus,
    .add-product textarea:focus,
    .add-product select:focus {
        outline: none;
        border-color: var(--accent);
    }

    .add-product button {
        padding: 1rem;
        border: none;
        background: var(--accent);
        color: #fff;
        font-size: 1.1rem;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
    }

    .add-product button:hover {
        background: #0056b3;
    }

    /* Zone de sélection du type */
    #type-selection>div {
        margin-bottom: 0.5rem;
    }

    .new-type-container {
        margin-top: 10px;
        padding: 10px;
        border: 1px dashed var(--accent);
        border-radius: 5px;
    }

    #icon-selector {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));
        gap: 10px;
        margin: 10px 0;
    }

    /* Ajout pour les sélecteurs d'icônes dans l'update */
    .icon-selector-update {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));
        gap: 10px;
        margin: 10px 0;
    }

    .icon-option {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        border: 2px solid var(--border);
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .icon-option:hover {
        border-color: var(--accent);
        background-color: #f0f8ff;
    }

    .icon-option.selected {
        border-color: var(--accent);
        background-color: var(--accent);
        color: white;
    }

    .icon-option ion-icon {
        font-size: 24px;
    }

    /* Filtres */
    .product-filters {
        margin-bottom: 20px;
        background: var(--card-bg);
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px var(--shadow);
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
    }

    .product-filters label {
        font-size: 1rem;
        color: var(--text);
    }

    .product-filters input,
    .product-filters select {
        padding: 0.5rem;
        border: 1px solid var(--border);
        border-radius: 5px;
        font-size: 1rem;
    }

    #apply-filters {
        background-color: #28a745;
        color: #fff;
        padding: 0.75rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
    }

    #apply-filters:hover {
        background-color: #218838;
    }

    /* Gestion des produits */
    .product-management {
        padding: 20px;
    }

    .product-management h2 {
        color: var(--text);
        margin-bottom: 20px;
        text-align: center;
    }

    .product-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .product-item {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        border: 1px solid var(--border);
        padding: 15px;
        border-radius: 10px;
        background-color: var(--card-bg);
        box-shadow: 0 2px 4px var(--shadow);
    }

    .products-info {
        display: grid;
        gap: 10px;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        flex: 1 1 auto;
    }

    .products-info label {
        display: flex;
        flex-direction: column;
        font-size: 0.95rem;
        color: var(--text);
    }

    .products-info input[type="text"],
    .products-info input[type="number"],
    .products-info textarea,
    .products-info select {
        padding: 5px;
        border: 1px solid var(--border);
        border-radius: 5px;
        font-size: 0.95rem;
        color: var(--text);
    }

    textarea {
        resize: vertical;
    }

    .product-actions {
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-items: center;
        justify-content: center;
    }

    button {
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.3s;
    }

    button.view-images {
        background-color: #17a2b8;
        color: #fff;
    }

    button.save-product {
        background-color: #ffc107;
        color: #fff;
    }

    button.save-product.saved {
        background-color: #28a745;
    }

    button.delete-product {
        background-color: #dc3545;
        color: #fff;
    }

    button:hover {
        opacity: 0.9;
    }


    /* Masquage des produits filtrés */
    .product-item.hidden {
        display: none;
        opacity: 0;
        transition: opacity 0.3s ease-out;
    }

    .product-item {
        transition: opacity 0.3s ease-in;
    }
</style>

<style>
    .dashboard-section {
        width: 100%;
        display: flex;
        justify-content: center;
    }

    .dashboard-btn button {
        background: var(--accent);
        color: white;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1rem;
    }

    .dashboard-btn button:hover {
        background: darken(var(--accent), 10%);
    }
</style>
<section class="dashboard-section">
    <a href="/dashboard" class="dashboard-btn">
        <button style="padding:10px; margin: 5px;">Dashboard</button>
    </a>
</section>

<!-- Formulaire d'ajout de produit -->
<section class="add-product">
    <h2>
        <ion-icon name="add-circle-outline"></ion-icon> Ajouter un produit
    </h2>
    <form id="add-product-form">
        <label for="product-name">Nom du produit :</label>
        <input type="text" id="product-name" name="product-name" placeholder="Entrez le nom" required />

        <!-- Zone de sélection du type -->
        <div id="type-selection">
            <div>
                <input type="checkbox" id="new-type-checkbox" name="new-type-checkbox" />
                <label for="new-type-checkbox">Créer un nouveau type</label>
            </div>
            <div id="existing-type-container">
                <label for="product-type-select">Type existant :</label>
                <select id="product-type-select" name="product-type" required>
                    <!-- Options chargées dynamiquement -->
                </select>
            </div>
            <!-- Nouveau type avec sélecteur d'icônes -->
            <div id="new-type-container" style="display: none;">
                <label for="new-type-name">Nouveau nom du type :</label>
                <input type="text" id="new-type-name" name="new-type-name" placeholder="Entrez le nouveau type" />

                <label for="new-type-logo">Sélectionnez une icône :</label>
                <div id="icon-selector">
                    <% listOfTypeLogos.forEach(icon=> { %>
                        <div class="icon-option" data-icon="<%= icon %>">
                            <ion-icon name="<%= icon %>"></ion-icon>
                        </div>
                        <% }); %>
                </div>
                <input type="hidden" id="new-type-logo" name="new-type-logo" />
            </div>
        </div>

        <label for="product-price">Prix :</label>
        <input type="number" id="product-price" name="product-price" placeholder="Entrez le prix" required />

        <label for="product-description">Description :</label>
        <textarea id="product-description" name="product-description" placeholder="Entrez la description"></textarea>

        <label for="product-inventory">Quantité :</label>
        <input type="number" min="0" id="product-inventory" name="product-inventory"
            placeholder="Entrez la quantité disponible" required />

        <label for="product-colors">Couleurs du produit (optionnel) :</label>
        <input type="text" id="product-colors" name="product-colors"
            placeholder="Entrez les couleurs séparées par des virgules" />

        <label for="product-sizes">Tailles du produit (optionnel) :</label>
        <input type="text" id="product-sizes" name="product-sizes"
            placeholder="Entrez les tailles séparées par des virgules" />

        <label for="product-images">Images du produit :</label>
        <input type="file" id="product-images" name="product-images" multiple accept="image/*" />

        <button type="submit">Ajouter le produit</button>
    </form>
</section>

<!-- Gestion des produits -->
<section class="product-management">
    <h2>Gestion des produits</h2>
    <div class="product-filters">
        <label for="filter-name">Nom :</label>
        <input type="text" id="filter-name" placeholder="Filtrer par nom" />

        <label for="filter-type">Type :</label>
        <input type="text" id="filter-type" placeholder="Filtrer par type" />

        <label for="filter-price-min">Prix min :</label>
        <input type="number" id="filter-price-min" placeholder="Min" />

        <label for="filter-price-max">Prix max :</label>
        <input type="number" id="filter-price-max" placeholder="Max" />

        <label for="filter-sort">Trier par :</label>
        <select id="filter-sort">
            <option value="name" selected>Nom</option>
            <option value="price">Prix</option>
            <option value="type">Type</option>
        </select>

        <button id="apply-filters">Appliquer</button>
    </div>

    <div class="product-list">
        <% if (products.status===200) { %>
            <% products.content.sort((a, b)=> a.name.localeCompare(b.name)); %>
                <% products.content.forEach(product=> { %>
                    <!-- Ajout d'un attribut data-product-type pour faciliter la sélection par défaut -->
                    <div class="product-item" data-product-id="<%= product.id %>"
                        data-product-type="<%= product.typeId %>">
                        <div class="products-info">
                            <label>
                                Nom :
                                <input type="text" value="<%= product.name %>" class="product-name" />
                            </label>
                            <label>
                                Description :
                                <textarea class="product-description"><%= product.description %></textarea>
                            </label>
                            <label>
                                Couleurs :
                                <input type="text" value="<%= product.colors ? product.colors.join(', ') : '' %>"
                                    class="product-colors" />
                            </label>
                            <label>
                                Tailles :
                                <input type="text" value="<%= product.sizes ? product.sizes.join(', ') : '' %>"
                                    class="product-sizes" />
                            </label>
                            <label>
                                Prix :
                                <input type="number" min="0" step="0.01" value="<%= product.price %>"
                                    class="product-price" />
                            </label>
                            <label>
                                Quantité :
                                <input type="number" min="0" value="<%= product.inventory %>"
                                    class="product-inventory" />
                            </label>
                            <label>
                                Type :
                                <!-- Zone de sélection pour la modification du type -->
                                <select class="existing-product-type"></select>
                                <input type="checkbox" class="new-type-checkbox"
                                    id="new-type-checkbox-<%= product.id %>" />
                                <label for="new-type-checkbox-<%= product.id %>">Créer un nouveau type</label>
                                <!-- Modification dans la section product-item -->
                                <div class="new-type-container" id="new-type-container-<%= product.id %>"
                                    style="display: none;">
                                    <input type="text" class="new-type-name" placeholder="Nouveau nom du type" />
                                    <div class="icon-selector-update">
                                        <% listOfTypeLogos.forEach(icon=> { %>
                                            <div class="icon-option" data-icon="<%= icon %>">
                                                <ion-icon name="<%= icon %>"></ion-icon>
                                            </div>
                                            <% }); %>
                                    </div>
                                    <input type="hidden" class="new-type-logo" />
                                </div>
                            </label>
                        </div>
                        <div class="product-actions">
                            <button class="view-images" data-product-id="<%= product.id %>"
                                data-images-ids='<%= JSON.stringify(product.url) %>'>
                                Voir les images
                            </button>
                            <button class="save-product" data-product-id="<%= product.id %>">
                                <ion-icon name="save-outline"></ion-icon>
                            </button>
                            <button class="delete-product" data-product-id="<%= product.id %>">
                                <ion-icon name="trash-outline"></ion-icon>
                            </button>
                        </div>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <p>Aucun produit disponible pour le moment.</p>
                            <% } %>
    </div>
</section>

<!-- Modal pour la gestion des images -->
<div id="modal" class="modal hidden">
    <div class="modal-content">
        <span class="close-btn">&times;</span>
        <h2>Images du produit</h2>
        <div id="image-list" class="image-list"></div>
        <label>
            Ajouter de nouvelles images :
            <input type="file" id="new-images" multiple accept="image/*">
        </label>
        <button id="upload-images">Sauvegarder les images</button>
    </div>
</div>

<script>
    // Fonction pour récupérer la liste des types existants
    async function getProductTypes_request() {
        const response = await fetch("<%= API_URL %>/api/v1/products/types", {
            method: "GET",
            credentials: "include",
        });
        return await response.json();
    }

    // Gestion de l'affichage des options de type
    document.addEventListener("DOMContentLoaded", async () => {
        /* Pour le formulaire de création */
        const newTypeCheckbox = document.getElementById("new-type-checkbox");
        const existingTypeContainer = document.getElementById("existing-type-container");
        const newTypeContainer = document.getElementById("new-type-container");
        const productTypeSelect = document.getElementById("product-type-select");

        // Toggle d'affichage selon le choix
        newTypeCheckbox.addEventListener("change", () => {
            if (newTypeCheckbox.checked) {
                existingTypeContainer.style.display = "none";
                newTypeContainer.style.display = "block";
                productTypeSelect.required = false;
            } else {
                existingTypeContainer.style.display = "block";
                newTypeContainer.style.display = "none";
                productTypeSelect.required = true;
            }
        });

        // Récupération et affichage des types existants
        const typesData = await getProductTypes_request();
        if (typesData.status === 200) {
            typesData.content.forEach(type => {
                const option = document.createElement("option");
                option.value = type.id;
                option.textContent = type.name;
                productTypeSelect.appendChild(option);
            });
        }

        /* Pour la modification des produits */
        const productItems = document.querySelectorAll(".product-item");
        if (productItems.length > 0) {
            const typesDataMod = await getProductTypes_request();
            productItems.forEach(item => {
                const selectElem = item.querySelector(".existing-product-type");
                if (typesDataMod.status === 200) {
                    typesDataMod.content.forEach(type => {
                        const option = document.createElement("option");
                        option.value = type.id;
                        option.textContent = type.name;
                        selectElem.appendChild(option);
                    });
                }

                // Affecter la valeur par défaut
                const productType = item.getAttribute("data-product-type");
                if (productType) {
                    selectElem.value = productType;
                }

                // Gestion du sélecteur d'icônes pour la mise à jour
                const iconSelector = item.querySelector('.icon-selector-update');
                const logoInput = item.querySelector('.new-type-logo');

                if (iconSelector) {
                    iconSelector.querySelectorAll('.icon-option').forEach(icon => {
                        icon.addEventListener('click', () => {
                            iconSelector.querySelectorAll('.icon-option').forEach(i => i.classList.remove('selected'));
                            icon.classList.add('selected');
                            logoInput.value = icon.getAttribute('data-icon');
                        });
                    });
                }

                // Gestion du toggle pour création d'un nouveau type
                const newTypeCheckboxMod = item.querySelector(".new-type-checkbox");
                const newTypeContainerMod = item.querySelector(".new-type-container");
                newTypeCheckboxMod.addEventListener("change", () => {
                    if (newTypeCheckboxMod.checked) {
                        selectElem.style.display = "none";
                        newTypeContainerMod.style.display = "block";
                    } else {
                        selectElem.style.display = "block";
                        newTypeContainerMod.style.display = "none";
                    }
                });
            });
        }

        // Initialisation des boutons de gestion des images
        document.querySelectorAll(".view-images").forEach(button => {
            button.addEventListener("click", async () => {
                const productId = button.dataset.productId;
                const imagesIds = JSON.parse(button.dataset.imagesIds);

                const imageList = document.createElement("div");
                imageList.style.cssText = `
                    display: flex;
                    flex-wrap: wrap;
                    justify-content: space-evenly;
                    gap: 15px;
                    padding: 20px 0;
                    max-height: 60vh;
                    overflow-y: auto;
                `;

                // Ajout des images existantes
                imagesIds.forEach(imgId => {
                    const imageWrapper = document.createElement("div");
                    imageWrapper.style.cssText = `
                        position: relative;
                        width: 120px;
                        height: 120px;
                        border-radius: 8px;
                        overflow: hidden;
                        cursor: pointer;
                        transition: transform 0.2s;
                    `;

                    const img = document.createElement("img");
                    img.style.cssText = `
                        width: 100%;
                        height: 100%;
                        object-fit: cover;
                    `;
                    img.src = `<%= API_URL %>/api/v1/images?product_id=${productId}&image_id=${imgId}`;

                    const deleteOverlay = document.createElement("div");
                    deleteOverlay.style.cssText = `
                        position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background: rgba(220, 53, 69, 0.7);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        opacity: 0;
                        transition: opacity 0.25s ease;
                    `;

                    deleteOverlay.innerHTML = `
                        <ion-icon name="trash-outline" 
                            style="color: white; font-size: 28px; filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));">
                        </ion-icon>
                    `;

                    // Gestion des événements
                    imageWrapper.addEventListener("mouseenter", () => {
                        deleteOverlay.style.opacity = "1";
                        imageWrapper.style.transform = "scale(1.05)";
                    });

                    imageWrapper.addEventListener("mouseleave", () => {
                        deleteOverlay.style.opacity = "0";
                        imageWrapper.style.transform = "scale(1)";
                    });

                    deleteOverlay.addEventListener("click", async (e) => {
                        e.stopPropagation();
                        if (await createModal(["Supprimer cette image ?"], "CONFIRM")) {
                            const response = await fetch(
                                `<%= API_URL %>/api/v1/products/remove-image/${productId}/${imgId}`,
                                { method: "DELETE", credentials: "include" }
                            );

                            if (response.ok) {
                                imageWrapper.remove();
                                await createModal(["Image supprimée avec succès"], "RELOAD");
                            }
                        }
                    });

                    imageWrapper.appendChild(img);
                    imageWrapper.appendChild(deleteOverlay);
                    imageList.appendChild(imageWrapper);
                });

                // Zone d'upload
                const uploadSection = document.createElement("div");
                uploadSection.style.marginTop = "25px";

                const fileInput = document.createElement("input");
                fileInput.type = "file";
                fileInput.multiple = true;
                fileInput.accept = "image/*";
                fileInput.style.cssText = `
                    display: block;
                    margin: 15px 0;
                    padding: 10px;
                    border: 2px dashed #ccc;
                    border-radius: 8px;
                    width: 100%;
                `;

                const uploadBtn = document.createElement("button");
                uploadBtn.innerHTML = '<ion-icon name="cloud-upload-outline"></ion-icon> Téléverser';
                uploadBtn.style.cssText = `
                    background: #4CAF50;
                    color: white;
                    padding: 12px 25px;
                    border: none;
                    border-radius: 6px;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    gap: 8px;
                    margin: 0 auto;
                `;

                uploadBtn.onclick = async () => {
                    if (!fileInput.files.length) {
                        await createModal(["Veuillez sélectionner des images"], "ERROR");
                        return;
                    }

                    const added_images_count = fileInput.files.length;

                    uploadBtn.disabled = true;
                    uploadBtn.innerHTML = '<ion-icon name="time-outline"></ion-icon> En cours...';

                    const formData = new FormData();
                    Array.from(fileInput.files).forEach(file => {
                        formData.append("images", file);
                    });

                    try {
                        const response = await fetch(
                            `<%= API_URL %>/api/v1/products/add-images/${productId}`,
                            { method: "POST", credentials: "include", body: formData }
                        );

                        const result = await response.json();
                        if (result.status === 200) {
                            result.content.url.forEach(newId => {
                                const newImageWrapper = document.createElement("div");
                                newImageWrapper.style.cssText = `
                                    position: relative;
                                    width: 120px;
                                    height: 120px;
                                    border-radius: 8px;
                                    overflow: hidden;
                                    cursor: pointer;
                                    transition: transform 0.2s;
                                `;

                                const newImg = document.createElement("img");
                                newImg.style.cssText = `
                                    width: 100%;
                                    height: 100%;
                                    object-fit: cover;
                                `;
                                newImg.src = `<%= API_URL %>/api/v1/images?product_id=${productId}&image_id=${newId}`;

                                const newDeleteOverlay = document.createElement("div");
                                newDeleteOverlay.style.cssText = `
                                    position: absolute;
                                    top: 0;
                                    left: 0;
                                    width: 100%;
                                    height: 100%;
                                    background: rgba(220, 53, 69, 0.7);
                                    display: flex;
                                    align-items: center;
                                    justify-content: center;
                                    opacity: 0;
                                    transition: opacity 0.25s ease;
                                `;

                                newDeleteOverlay.innerHTML = `
                                    <ion-icon name="trash-outline" 
                                        style="color: white; font-size: 28px; filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));">
                                    </ion-icon>
                                `;

                                newImageWrapper.appendChild(newImg);
                                newImageWrapper.appendChild(newDeleteOverlay);
                                imageList.appendChild(newImageWrapper);
                            });

                            await createModal([`${added_images_count} images ajoutées`], "RELOAD");
                        }
                    } finally {
                        uploadBtn.disabled = false;
                        uploadBtn.innerHTML = '<ion-icon name="cloud-upload-outline"></ion-icon> Téléverser';
                    }
                };

                uploadSection.appendChild(fileInput);
                uploadSection.appendChild(uploadBtn);

                await createModal(
                    [imageList, uploadSection],
                    "INFO",
                    `Images du produit #${productId}`
                );
            });
        });
    });

    // Script : Création d'un produit
    async function createProduct_request(name, description, colors, sizes, price, inventory, typeValue, isNewType, newTypeLogo, imagesFiles) {
        const formData = new FormData();
        formData.append('name', name);
        formData.append('description', description);
        formData.append('colors', colors);
        formData.append('sizes', sizes);
        formData.append('price', price);
        formData.append('inventory', inventory);

        if (isNewType) {
            formData.append('type', JSON.stringify({ name: typeValue, logoUrl: newTypeLogo }));
        } else {
            formData.append('type', typeValue);
        }

        for (const fileItem of imagesFiles.files) {
            formData.append('images', fileItem);
        }

        const response = await fetch("<%= API_URL %>/api/v1/products/create", {
            method: 'POST',
            credentials: 'include',
            body: formData,
        });
        return await response.json();
    }

    document.getElementById("add-product-form").addEventListener("submit", async event => {
        event.preventDefault();

        const name = document.getElementById("product-name").value;
        const description = document.getElementById("product-description").value;
        const colors = document.getElementById("product-colors").value;
        const sizes = document.getElementById("product-sizes").value;
        const price = document.getElementById("product-price").value;
        const inventory = document.getElementById("product-inventory").value;
        const images = document.getElementById("product-images");

        const isNewType = document.getElementById("new-type-checkbox").checked;
        let typeValue = "";
        let newTypeLogo = "";
        if (isNewType) {
            typeValue = document.getElementById("new-type-name").value;
            newTypeLogo = document.getElementById("new-type-logo").value;
        } else {
            typeValue = document.getElementById("product-type-select").value;
        }

        const response = await createProduct_request(name, description, colors, sizes, price, inventory, typeValue, isNewType, newTypeLogo, images);
        if (response.status === 200) {
            await createModal(["Produit ajouté avec succès !"], "RELOAD");
        } else {
            await createModal(response.id.codes || ["Erreur lors de la création du produit"], "ERROR");
        }
    });

    document.addEventListener("DOMContentLoaded", async () => {
        document.querySelectorAll(".save-product").forEach(button => {
            button.addEventListener("click", () => {
                const productId = button.getAttribute("data-product-id");
                saveProductChanges(productId, button);
            });
        });
        document.querySelectorAll(".delete-product").forEach(button => {
            button.addEventListener("click", () => {
                const productId = button.getAttribute("data-product-id");
                confirmDeletion(productId);
            });
        });
    });

    function updateProductInDOM(product) {
        const productItem = document.querySelector(`.product-item[data-product-id='${product.id}']`);
        productItem.querySelector(".product-name").value = product.name;
        productItem.querySelector(".product-description").value = product.description;
        productItem.querySelector(".product-colors").value = product.colors ? product.colors.join(", ") : "";
        productItem.querySelector(".product-sizes").value = product.sizes ? product.sizes.join(", ") : "";
        productItem.querySelector(".product-price").value = product.price;
        productItem.querySelector(".product-inventory").value = product.inventory;
        // Mise à jour du type dans le select
        const selectElem = productItem.querySelector(".existing-product-type");
        selectElem.value = product.typeId;
    }

    async function saveProductChanges(productId, button) {
        if (await createModal(["Êtes-vous certain de vouloir modifier ce produit ?"], "CONFIRM")) {
            const productItem = document.querySelector(`.product-item[data-product-id='${productId}']`);
            const name = productItem.querySelector(".product-name").value;
            const description = productItem.querySelector(".product-description").value;
            const colors = productItem.querySelector(".product-colors").value;
            const sizes = productItem.querySelector(".product-sizes").value;
            const price = parseFloat(productItem.querySelector(".product-price").value);
            const inventory = parseInt(productItem.querySelector(".product-inventory").value, 10);

            const newTypeCheckbox = productItem.querySelector(".new-type-checkbox");
            let typeValue = "";
            if (newTypeCheckbox.checked) {
                const newTypeName = productItem.querySelector(".new-type-name").value;
                const newTypeLogo = productItem.querySelector(".new-type-logo").value; // Récupère la valeur du sélecteur
                typeValue = JSON.stringify({ name: newTypeName, logoUrl: newTypeLogo });
            } else {
                const existingTypeSelect = productItem.querySelector(".existing-product-type");
                typeValue = existingTypeSelect.value;
            }

            const response = await updateProduct_request(name, description, colors, sizes, price, inventory, typeValue, productId);
            if (response.status === 200) {
                updateProductInDOM(response.content);
                button.classList.add("saved");
                button.querySelector("ion-icon").setAttribute("name", "checkmark-done-outline");
                setTimeout(() => {
                    button.querySelector("ion-icon").setAttribute("name", "save-outline");
                    button.classList.remove("saved");
                }, 1000);
            } else {
                await createModal(response.id.codes || ["Erreur lors de la modification du produit"], "ERROR");
            }
        }
    }

    async function confirmDeletion(productId) {
        if (await createModal(["Êtes-vous sûr de vouloir supprimer ce produit ?"], "CONFIRM")) {
            const response = await deleteProduct_request(productId);
            if (response.status === 200) {
                await createModal("Produit supprimé avec succès", "RELOAD");
            } else {
                await createModal(response.id.codes || ["Erreur lors de la suppression du produit"], "ERROR");
            }
        }
    }

    // Fonctions de communication avec le backend
    async function updateProduct_request(name, description, colors, sizes, price, inventory, type, id) {
        const formData = new FormData();
        formData.append("name", name);
        formData.append("description", description);
        formData.append("colors", colors);
        formData.append("sizes", sizes);
        formData.append("price", price);
        formData.append("inventory", inventory);
        formData.append("type", type);

        const response = await fetch(`<%= API_URL %>/api/v1/products/update/${id}`, {
            method: "PATCH",
            credentials: "include",
            body: formData,
        });
        return await response.json();
    }

    async function deleteProduct_request(id) {
        const response = await fetch(`<%= API_URL %>/api/v1/products/delete/${id}`, {
            method: "DELETE",
            credentials: "include",
        });
        return await response.json();
    }

    // Script : Filtres et tri
    document.addEventListener("DOMContentLoaded", () => {
        const filterName = document.getElementById("filter-name");
        const filterType = document.getElementById("filter-type");
        const filterPriceMin = document.getElementById("filter-price-min");
        const filterPriceMax = document.getElementById("filter-price-max");
        const filterSort = document.getElementById("filter-sort");
        const applyFiltersButton = document.getElementById("apply-filters");
        const productList = document.querySelector(".product-list");

        const applyFilters = () => {
            const name = filterName.value.toLowerCase().trim();
            const type = filterType.value.toLowerCase().trim();
            const priceMin = filterPriceMin.value === "" ? 0 : parseFloat(filterPriceMin.value);
            const priceMax = filterPriceMax.value === "" ? Infinity : parseFloat(filterPriceMax.value);
            const sortBy = filterSort.value;

            let products = Array.from(productList.querySelectorAll(".product-item"));

            // Réinitialiser la visibilité de tous les produits
            products.forEach(product => {
                product.classList.remove("hidden");
            });

            // Filtrer les produits
            products.forEach(product => {
                const productName = product.querySelector(".product-name").value.toLowerCase();
                const productType = product.getAttribute("data-product-type").toLowerCase();
                const productPrice = parseFloat(product.querySelector(".product-price").value);

                const matchesName = name ? productName.includes(name) : true;
                const matchesType = type ? productType.includes(type) : true;
                const matchesPrice = productPrice >= priceMin && productPrice <= priceMax;

                if (!(matchesName && matchesType && matchesPrice)) {
                    product.classList.add("hidden");
                }
            });

            // Tri des produits visibles
            let visibleProducts = products.filter(product => !product.classList.contains("hidden"));
            visibleProducts.sort((a, b) => {
                if (sortBy === "name") {
                    return a.querySelector(".product-name").value.localeCompare(b.querySelector(".product-name").value);
                } else if (sortBy === "price") {
                    return parseFloat(a.querySelector(".product-price").value) - parseFloat(b.querySelector(".product-price").value);
                } else if (sortBy === "type") {
                    return a.getAttribute("data-product-type").localeCompare(b.getAttribute("data-product-type"));
                }
                return 0;
            });

            // Réordonner les éléments dans le DOM
            visibleProducts.forEach(product => productList.appendChild(product));
        };

        applyFiltersButton.addEventListener("click", applyFilters);
    });

    // Fonction pour sauvegarder des champs du formulaire dans le localStorage
    function saveFormDataToLocalStorage() {
        const formData = {
            name: document.getElementById('product-name').value,
            description: document.getElementById('product-description').value,
            price: document.getElementById('product-price').value,
            inventory: document.getElementById('product-inventory').value,
            colors: document.getElementById('product-colors').value,
            sizes: document.getElementById('product-sizes').value,
        };
        localStorage.setItem('productFormData', JSON.stringify(formData));
    }

    // Chargement des données sauvegardées
    function loadFormDataFromLocalStorage() {
        const savedData = localStorage.getItem('productFormData');
        if (savedData) {
            const formData = JSON.parse(savedData);
            document.getElementById('product-name').value = formData.name || '';
            document.getElementById('product-description').value = formData.description || '';
            document.getElementById('product-price').value = formData.price || '';
            document.getElementById('product-inventory').value = formData.inventory || '';
            document.getElementById('product-colors').value = formData.colors || '';
            document.getElementById('product-sizes').value = formData.sizes || '';
        }
    }

    // Ajout des écouteurs d'événements pour sauvegarder à chaque modification
    document.addEventListener('DOMContentLoaded', () => {
        loadFormDataFromLocalStorage();

        document.getElementById('product-name').addEventListener('input', saveFormDataToLocalStorage);
        document.getElementById('product-description').addEventListener('input', saveFormDataToLocalStorage);
        document.getElementById('product-price').addEventListener('input', saveFormDataToLocalStorage);
        document.getElementById('product-inventory').addEventListener('input', saveFormDataToLocalStorage);
        document.getElementById('product-colors').addEventListener('input', saveFormDataToLocalStorage);
        document.getElementById('product-sizes').addEventListener('input', saveFormDataToLocalStorage);
    });

    // Gestion du sélecteur d'icônes
    document.addEventListener("DOMContentLoaded", () => {
        const iconOptions = document.querySelectorAll("#icon-selector .icon-option");
        const logoInput = document.getElementById("new-type-logo");

        iconOptions.forEach(icon => {
            icon.addEventListener("click", () => {
                // Retirer la sélection précédente
                iconOptions.forEach(i => i.classList.remove("selected"));

                // Sélectionner l'icône cliquée
                icon.classList.add("selected");

                // Mettre à jour l'input caché avec le nom de l'icône
                const iconName = icon.getAttribute("data-icon");
                logoInput.value = iconName;
            });
        });
    });
</script>