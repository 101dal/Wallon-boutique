<style>
    /* Style global */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: var(--background);
        margin: 0;
        padding: 0;
    }

    .orders-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    /* Sections d'ajout et de liste */
    .order-list {
        background: var(--card-bg);
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 8px var(--shadow);
        margin-bottom: 2rem;
    }

    .order-list h2 {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--accent);
        font-size: 1.8rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid var(--accent);
        padding-bottom: 0.5rem;
    }

    /* Filtres */
    .order-filters {
        margin-bottom: 20px;
        background: var(--card-bg);
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px var(--shadow);
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
    }

    .order-filters label {
        font-size: 1rem;
        color: var(--text);
    }

    .order-filters input,
    .order-filters select {
        padding: 0.5rem;
        border: 1px solid var(--border);
        border-radius: 5px;
        font-size: 1rem;
    }

    #apply-filters {
        background-color: #28a745;
        color: #fff;
        padding: 0.75rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
    }

    #apply-filters:hover {
        background-color: #218838;
    }

    /* Gestion des commandes */
    .order-management {
        padding: 20px;
    }

    .order-management h2 {
        color: var(--text);
        margin-bottom: 20px;
        text-align: center;
    }

    .order-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .order-item {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        border: 1px solid var(--border);
        padding: 15px;
        border-radius: 10px;
        background-color: var(--card-bg);
        box-shadow: 0 2px 4px var(--shadow);
    }

    .orders-info {
        display: grid;
        gap: 10px;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        flex: 1 1 auto;
    }

    .orders-info label {
        display: flex;
        flex-direction: column;
        font-size: 0.95rem;
        color: var(--text);
    }

    .orders-info input[type="text"],
    .orders-info input[type="number"],
    .orders-info textarea,
    .orders-info select {
        padding: 5px;
        border: 1px solid var(--border);
        border-radius: 5px;
        font-size: 0.95rem;
        color: var(--text);
    }

    textarea {
        resize: vertical;
    }

    .order-actions {
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-items: center;
        justify-content: center;
    }

    button {
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.3s;
    }

    button.view-images {
        background-color: #17a2b8;
        color: #fff;
    }

    button.save-order {
        background-color: #ffc107;
        color: #fff;
    }

    button.save-order.saved {
        background-color: #28a745;
    }

    button.delete-order {
        background-color: #dc3545;
        color: #fff;
    }

    button:hover {
        opacity: 0.9;
    }

    /* Modal */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal.hidden {
        display: none;
    }

    .modal-content {
        background: var(--card-bg);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 8px 16px var(--shadow);
        width: 80%;
        max-width: 600px;
        position: relative;
    }

    .modal-content h2 {
        margin-bottom: 20px;
        color: var(--accent);
    }

    .modal-content .image-list {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
    }

    .modal-content .image-list .image-list-element {
        position: relative;
    }

    .modal-content .image-list img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 5px;
        border: 1px solid var(--border);
        cursor: pointer;
    }

    .modal-content .image-list .delete-icon {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(220, 53, 69, 0.8);
        color: #fff;
        font-size: 24px;
        text-align: center;
        line-height: 100px;
        border-radius: 5px;
        opacity: 0;
        transition: opacity 0.25s ease-in-out;
        pointer-events: none;
    }

    .modal-content .image-list .image-list-element:hover .delete-icon {
        opacity: 0.5;
    }

    .modal-content label {
        display: block;
        margin-bottom: 10px;
    }

    #upload-images {
        background-color: #28a745;
        color: #fff;
        padding: 10px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        transition: background 0.3s;
    }

    #upload-images:hover {
        background-color: #218838;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 28px;
        color: var(--text);
        cursor: pointer;
    }

    /* Masquage des commandes filtrées */
    .order-item.hidden {
        display: none;
        opacity: 0;
        transition: opacity 0.3s ease-out;
    }

    .order-item {
        transition: opacity 0.3s ease-in;
    }

    /* Style pour le modal d'erreur */
    .error-list {
        color: #dc3545;
        padding-left: 20px;
        list-style-type: disc;
        max-height: 60vh;
        overflow-y: auto;
    }

    .error-list li {
        margin-bottom: 8px;
        padding: 5px 0;
        border-bottom: 1px solid var(--border);
    }
</style>

<!-- Gestion des commandes -->
<section class="order-management">
    <h2>Gestion des commandes</h2>
    <div class="order-filters">
        <label for="filter-user-id">ID de l'utilisateur :</label>
        <input type="number" id="filter-user-id" placeholder="Filtrer par ID de l'utilisateur" />

        <label for="filter-status">Statut :</label>
        <select id="filter-status">
            <option value="">Tous</option>
            <option value="PENDING">En attente</option>
            <option value="COMPLETED">Terminé</option>
            <option value="CANCELLED">Annulé</option>
        </select>

        <label for="filter-sort">Trier par :</label>
        <select id="filter-sort">
            <option value="createdAt" selected>Date de création</option>
            <option value="status">Statut</option>
        </select>

        <button id="apply-filters">Appliquer</button>
    </div>

    <div class="order-list">
        <% if (orders.status===200) { %>
            <% orders.content.sort((a, b)=> new Date(b.createdAt) - new Date(a.createdAt)); %>
                <% orders.content.forEach(order=> { %>
                    <div class="order-item" data-order-id="<%= order.id %>" data-order-status="<%= order.status %>">
                        <div class="orders-info">
                            <label>
                                ID de l'utilisateur :
                                <input type="number" value="<%= order.user_id %>" class="order-user-id" disabled />
                            </label>
                            <label>
                                Statut :
                                <select class="order-status">
                                    <option value="PENDING" <%=order.status==='PENDING' ? 'selected' : '' %>>En attente
                                    </option>
                                    <option value="COMPLETED" <%=order.status==='COMPLETED' ? 'selected' : '' %>>Terminé
                                    </option>
                                    <option value="CANCELLED" <%=order.status==='CANCELLED' ? 'selected' : '' %>>Annulé
                                    </option>
                                </select>
                            </label>
                            <label>
                                Produits :
                                <ul>
                                    <% order.products.forEach(product=> { %>
                                        <li>
                                            Taille : <%= product.size %>, Couleur : <%= product.color %>, Quantité : <%=
                                                        product.quantity %>, ID du produit : <%= product.product_id %>
                                        </li>
                                        <% }); %>
                                </ul>
                            </label>
                        </div>
                        <div class="order-actions">
                            <button class="save-order" data-order-id="<%= order.id %>">
                                <ion-icon name="save-outline"></ion-icon>
                            </button>
                        </div>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <p>Aucune commande disponible pour le moment.</p>
                            <% } %>
    </div>
</section>

<!-- Modal pour les erreurs -->
<div id="error-modal" class="modal hidden">
    <div class="modal-content">
        <span class="close-btn">&times;</span>
        <h2>Erreurs détectées</h2>
        <ul class="error-list"></ul>
    </div>
</div>

<script>
    // Variable globale pour stocker les messages d'erreur
    let errorMessages = {};

    // Récupérer les messages d'erreur depuis l'API
    async function fetchErrorMessages() {
        try {
            const response = await fetch('http://localhost:3000/api/v1/errors');
            if (response.ok) {
                errorMessages = await response.json();
            }
        } catch (error) {
            console.error('Erreur lors de la récupération des messages d\'erreur:', error);
        }
    }

    // Fonction d'affichage des erreurs
    function showErrorModal(errors) {
        const modal = document.getElementById('error-modal');
        const errorList = modal.querySelector('.error-list');
        errorList.innerHTML = '';

        errors.forEach(error => {
            const li = document.createElement('li');
            let message = error;

            if (typeof error === 'number') {
                message = errorMessages[error] || `Erreur inconnue (code ${error})`;
            }

            li.textContent = message;
            errorList.appendChild(li);
        });

        modal.classList.remove('hidden');
    }

    // Gestion de la fermeture du modal
    document.querySelectorAll('#error-modal .close-btn, #error-modal').forEach(el => {
        el.addEventListener('click', (e) => {
            if (e.target === el || e.target.classList.contains('close-btn')) {
                document.getElementById('error-modal').classList.add('hidden');
            }
        });
    });

    // Appeler au chargement de la page
    document.addEventListener('DOMContentLoaded', fetchErrorMessages);

    // Script : Gestion de la modal, modification et suppression
    document.addEventListener("DOMContentLoaded", () => {
        const modal = document.getElementById("modal");
        const closeModalButton = document.querySelector(".close-btn");
        const uploadImagesButton = document.getElementById("upload-images");

        // Sauvegarder les modifications d'une commande
        document.querySelectorAll(".save-order").forEach(button => {
            button.addEventListener("click", () => {
                const orderId = button.getAttribute("data-order-id");
                saveOrderChanges(orderId, button);
            });
        });

        // Fermer la modal en cliquant en dehors du contenu
        modal.addEventListener("click", (event) => {
            if (event.target === modal) {
                closeModal();
            }
        });

        // Empêcher la fermeture lors d'un clic dans la modal
        const modalContent = document.querySelector(".modal-content");
        modalContent.addEventListener("click", (event) => {
            event.stopPropagation();
        });

        function closeModal() {
            modal.classList.add("hidden");
            modal.removeAttribute("data-order-id");
        }

        async function saveOrderChanges(orderId, button) {
            if (confirm("Êtes-vous certain de vouloir modifier cette commande ?")) {
                const orderItem = document.querySelector(`.order-item[data-order-id='${orderId}']`);
                const status = orderItem.querySelector(".order-status").value;

                const response = await updateOrder_request(orderId, status);
                console.log(response)
                if (response.status === 200) {
                    button.classList.add("saved");
                    button.querySelector("ion-icon").setAttribute("name", "checkmark-done-outline");
                    setTimeout(() => {
                        button.querySelector("ion-icon").setAttribute("name", "save-outline");
                        button.classList.remove("saved");
                    }, 1000);
                } else {
                    const errors = response.id?.codes || response.content || ['Erreur inconnue'];
                    showErrorModal(errors);
                }
            }
        }

        // Fonctions de communication avec le backend
        async function updateOrder_request(id, status) {
            const formData = new FormData();
            formData.append("status", status);

            const response = await fetch(`http://localhost:3000/api/v1/orders/update/status/${id}`, {
                method: "PATCH",
                credentials: "include",
                body: formData
            });
            return await response.json();
        }
    });

    // Script : Filtres et tri
    document.addEventListener("DOMContentLoaded", () => {
        const filterUserId = document.getElementById("filter-user-id");
        const filterStatus = document.getElementById("filter-status");
        const filterSort = document.getElementById("filter-sort");
        const applyFiltersButton = document.getElementById("apply-filters");
        const orderList = document.querySelector(".order-list");

        const applyFilters = () => {
            const userId = filterUserId.value.trim();
            const status = filterStatus.value.trim();
            const sortBy = filterSort.value;

            let orders = Array.from(orderList.querySelectorAll(".order-item"));

            // Réinitialiser la visibilité de toutes les commandes
            orders.forEach(order => {
                order.classList.remove("hidden");
            });

            // Filtrer les commandes
            orders.forEach(order => {
                const orderUserId = order.querySelector(".order-user-id").value;
                const orderStatus = order.getAttribute("data-order-status");

                const matchesUserId = userId ? orderUserId === userId : true;
                const matchesStatus = status ? orderStatus === status : true;

                if (!(matchesUserId && matchesStatus)) {
                    order.classList.add("hidden");
                }
            });

            // Tri des commandes visibles
            let visibleOrders = orders.filter(order => !order.classList.contains("hidden"));
            visibleOrders.sort((a, b) => {
                if (sortBy === "createdAt") {
                    return new Date(b.getAttribute("data-order-createdAt")) - new Date(a.getAttribute("data-order-createdAt"));
                } else if (sortBy === "status") {
                    return a.getAttribute("data-order-status").localeCompare(b.getAttribute("data-order-status"));
                }
                return 0;
            });

            // Réordonner les éléments dans le DOM
            visibleOrders.forEach(order => orderList.appendChild(order));
        };

        applyFiltersButton.addEventListener("click", applyFilters);
    });
</script>