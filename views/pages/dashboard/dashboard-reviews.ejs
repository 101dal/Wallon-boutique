<style>
    /* Style global */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: var(--background);
        margin: 0;
        padding: 0;
    }

    .reviews-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    /* Sections d'ajout et de liste */
    .add-review,
    .review-list {
        background: var(--card-bg);
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 8px var(--shadow);
        margin-bottom: 2rem;
    }

    .add-review h2,
    .review-list h2 {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--accent);
        font-size: 1.8rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid var(--accent);
        padding-bottom: 0.5rem;
    }

    /* Formulaire d'ajout d'avis */
    .add-review form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .add-review label {
        font-weight: 600;
        color: var(--text);
    }

    .add-review input,
    .add-review textarea,
    .add-review select {
        padding: 0.8rem;
        border: 1px solid var(--border);
        border-radius: 5px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

    .add-review input:focus,
    .add-review textarea:focus,
    .add-review select:focus {
        outline: none;
        border-color: var(--accent);
    }

    .add-review button {
        padding: 1rem;
        border: none;
        background: var(--accent);
        color: #fff;
        font-size: 1.1rem;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
    }

    .add-review button:hover {
        background: #0056b3;
    }

    /* Filtres */
    .review-filters {
        margin-bottom: 20px;
        background: var(--card-bg);
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px var(--shadow);
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
    }

    .review-filters label {
        font-size: 1rem;
        color: var(--text);
    }

    .review-filters input,
    .review-filters select {
        padding: 0.5rem;
        border: 1px solid var(--border);
        border-radius: 5px;
        font-size: 1rem;
    }

    #apply-filters {
        background-color: #28a745;
        color: #fff;
        padding: 0.75rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
    }

    #apply-filters:hover {
        background-color: #218838;
    }

    /* Gestion des avis */
    .review-management {
        padding: 20px;
    }

    .review-management h2 {
        color: var(--text);
        margin-bottom: 20px;
        text-align: center;
    }

    .review-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .review-item {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        border: 1px solid var(--border);
        padding: 15px;
        border-radius: 10px;
        background-color: var(--card-bg);
        box-shadow: 0 2px 4px var(--shadow);
    }

    .review-item.reported {
        background-color: #ffcc00;
        /* Couleur orange pour les reviews reportées */
    }

    .reviews-info {
        display: grid;
        gap: 10px;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        flex: 1 1 auto;
    }

    .reviews-info label {
        display: flex;
        flex-direction: column;
        font-size: 0.95rem;
        color: var(--text);
    }

    .reviews-info input[type="text"],
    .reviews-info input[type="number"],
    .reviews-info textarea,
    .reviews-info select {
        padding: 5px;
        border: 1px solid var(--border);
        border-radius: 5px;
        font-size: 0.95rem;
        color: var(--text);
    }

    textarea {
        resize: vertical;
    }

    .review-actions {
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-items: center;
        justify-content: center;
    }

    button {
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.3s;
    }

    button.view-images {
        background-color: #17a2b8;
        color: #fff;
    }

    button.save-review {
        background-color: #ffc107;
        color: #fff;
    }

    button.save-review.saved {
        background-color: #28a745;
    }

    button.delete-review {
        background-color: #dc3545;
        color: #fff;
    }

    button:hover {
        opacity: 0.9;
    }

    /* Modal */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal.hidden {
        display: none;
    }

    .modal-content {
        background: var(--card-bg);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 8px 16px var(--shadow);
        width: 80%;
        max-width: 600px;
        position: relative;
    }

    .modal-content h2 {
        margin-bottom: 20px;
        color: var(--accent);
    }

    .modal-content .image-list {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
    }

    .modal-content .image-list .image-list-element {
        position: relative;
    }

    .modal-content .image-list img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 5px;
        border: 1px solid var(--border);
        cursor: pointer;
    }

    .modal-content .image-list .delete-icon {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(220, 53, 69, 0.8);
        color: #fff;
        font-size: 24px;
        text-align: center;
        line-height: 100px;
        border-radius: 5px;
        opacity: 0;
        transition: opacity 0.25s ease-in-out;
        pointer-events: none;
    }

    .modal-content .image-list .image-list-element:hover .delete-icon {
        opacity: 0.5;
    }

    .modal-content label {
        display: block;
        margin-bottom: 10px;
    }

    #upload-images {
        background-color: #28a745;
        color: #fff;
        padding: 10px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        transition: background 0.3s;
    }

    #upload-images:hover {
        background-color: #218838;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 28px;
        color: var(--text);
        cursor: pointer;
    }

    /* Masquage des avis filtrés */
    .review-item.hidden {
        display: none;
        opacity: 0;
        transition: opacity 0.3s ease-out;
    }

    .review-item {
        transition: opacity 0.3s ease-in;
    }

    /* Style pour le modal d'erreur */
    .error-list {
        color: #dc3545;
        padding-left: 20px;
        list-style-type: disc;
        max-height: 60vh;
        overflow-y: auto;
    }

    .error-list li {
        margin-bottom: 8px;
        padding: 5px 0;
        border-bottom: 1px solid var(--border);
    }
</style>

<!-- Formulaire d'ajout d'avis -->
<section class="add-review">
    <h2>
        <ion-icon name="add-circle-outline"></ion-icon> Ajouter un avis
    </h2>
    <form id="add-review-form">
        <label for="review-user-id">ID de l'utilisateur :</label>
        <input type="number" id="review-user-id" name="review-user-id" placeholder="Entrez l'ID de l'utilisateur"
            required />

        <label for="review-product-id">ID du produit :</label>
        <input type="number" id="review-product-id" name="review-product-id" placeholder="Entrez l'ID du produit"
            required />

        <label for="review-text">Avis :</label>
        <textarea id="review-text" name="review-text" placeholder="Entrez l'avis" required></textarea>

        <label for="review-rating">Note :</label>
        <input type="number" id="review-rating" name="review-rating" placeholder="Entrez la note" required />

        <button type="submit">Ajouter l'avis</button>
    </form>
</section>

<!-- Gestion des avis -->
<section class="review-management">
    <h2>Gestion des avis</h2>
    <div class="review-filters">
        <label for="filter-user-id">ID de l'utilisateur :</label>
        <input type="number" id="filter-user-id" placeholder="Filtrer par ID de l'utilisateur" />

        <label for="filter-product-id">ID du produit :</label>
        <input type="number" id="filter-product-id" placeholder="Filtrer par ID du produit" />

        <label for="filter-rating-min">Note min :</label>
        <input type="number" id="filter-rating-min" placeholder="Min" />

        <label for="filter-rating-max">Note max :</label>
        <input type="number" id="filter-rating-max" placeholder="Max" />

        <label for="filter-sort">Trier par :</label>
        <select id="filter-sort">
            <option value="createdAt" selected>Date de création</option>
            <option value="rating">Note</option>
        </select>

        <button id="apply-filters">Appliquer</button>
    </div>

    <div class="review-list">
        <% if (reviews.status===200) { %>
            <% reviews.content.sort((a, b)=> new Date(b.createdAt) - new Date(a.createdAt)); %>
                <% reviews.content.forEach(review=> { %>
                    <div class="review-item <%= review.reported ? 'reported' : '' %>" data-review-id="<%= review.id %>"
                        data-review-user-id="<%= review.user_id %>" data-review-product-id="<%= review.product_id %>"
                        data-review-rating="<%= review.rating %>">
                        <div class="reviews-info">
                            <label>
                                ID de l'utilisateur :
                                <input type="number" value="<%= review.user_id %>" class="review-user-id" readonly />
                            </label>
                            <label>
                                ID du produit :
                                <input type="number" value="<%= review.product_id %>" class="review-product-id"
                                    readonly />
                            </label>
                            <label>
                                Avis :
                                <textarea class="review-text"><%= review.review %></textarea>
                            </label>
                            <label>
                                Note :
                                <input type="number" value="<%= review.rating %>" class="review-rating" />
                            </label>
                            <label>
                                Nombre de reports :
                                <input type="number" value="<%= review.reportedByUsers.length %>"
                                    class="review-report-count" readonly />
                            </label>
                        </div>
                        <div class="review-actions">
                            <button class="save-review" data-review-id="<%= review.id %>">
                                <ion-icon name="save-outline"></ion-icon>
                            </button>
                            <button class="delete-review" data-review-id="<%= review.id %>">
                                <ion-icon name="trash-outline"></ion-icon>
                            </button>
                        </div>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <p>Aucun avis disponible pour le moment.</p>
                            <% } %>
    </div>
</section>

<!-- Modal pour les erreurs -->
<div id="error-modal" class="modal hidden">
    <div class="modal-content">
        <span class="close-btn">&times;</span>
        <h2>Erreurs détectées</h2>
        <ul class="error-list"></ul>
    </div>
</div>

<script>
    // Variable globale pour stocker les messages d'erreur
    let errorMessages = {};

    // Récupérer les messages d'erreur depuis l'API
    async function fetchErrorMessages() {
        try {
            const response = await fetch('http://localhost:3000/api/v1/errors');
            if (response.ok) {
                errorMessages = await response.json();
            }
        } catch (error) {
            console.error('Erreur lors de la récupération des messages d\'erreur:', error);
        }
    }

    // Fonction d'affichage des erreurs
    function showErrorModal(errors) {
        const modal = document.getElementById('error-modal');
        const errorList = modal.querySelector('.error-list');
        errorList.innerHTML = '';

        errors.forEach(error => {
            const li = document.createElement('li');
            let message = error;

            if (typeof error === 'number') {
                message = errorMessages[error] || `Erreur inconnue (code ${error})`;
            }

            li.textContent = message;
            errorList.appendChild(li);
        });

        modal.classList.remove('hidden');
    }

    // Gestion de la fermeture du modal
    document.querySelectorAll('#error-modal .close-btn, #error-modal').forEach(el => {
        el.addEventListener('click', (e) => {
            if (e.target === el || e.target.classList.contains('close-btn')) {
                document.getElementById('error-modal').classList.add('hidden');
            }
        });
    });

    // Appeler au chargement de la page
    document.addEventListener('DOMContentLoaded', fetchErrorMessages);

    // Fonction pour récupérer la liste des avis
    async function getReviews_request() {
        const response = await fetch("http://localhost:3000/api/v1/reviews/all", {
            method: "GET",
            credentials: "include",
        });
        return await response.json();
    }

    // Script : Création d'un avis
    async function createReview_request(userId, productId, review, rating) {
        const formData = new FormData();
        formData.append("review", review)
        formData.append("rating", rating)
        formData.append("user_id", userId)
        formData.append("product_id", productId)

        const response = await fetch(`http://localhost:3000/api/v1/reviews/create/custom`, {
            method: 'POST',
            credentials: 'include',
            body: formData
        });
        return await response.json();
    }

    document.getElementById("add-review-form").addEventListener("submit", async event => {
        event.preventDefault();

        const userId = document.getElementById("review-user-id").value;
        const productId = document.getElementById("review-product-id").value;
        const review = document.getElementById("review-text").value;
        const rating = document.getElementById("review-rating").value;

        const response = await createReview_request(userId, productId, review, rating);
        if (response.status === 200) {
            alert("Avis ajouté avec succès !");
            window.location.reload();
        } else {
            const errors = response.id?.codes || response.content || ['Erreur inconnue'];
            showErrorModal(errors);
        }
    });

    // Script : Gestion de la modal, modification et suppression
    document.addEventListener("DOMContentLoaded", () => {
        const modal = document.getElementById("modal");
        const closeModalButton = document.querySelector(".close-btn");
        const uploadImagesButton = document.getElementById("upload-images");

        // Sauvegarder les modifications d'un avis
        document.querySelectorAll(".save-review").forEach(button => {
            button.addEventListener("click", () => {
                const reviewId = button.getAttribute("data-review-id");
                saveReviewChanges(reviewId, button);
            });
        });

        // Suppression d'un avis
        document.querySelectorAll(".delete-review").forEach(button => {
            button.addEventListener("click", () => {
                const reviewId = button.getAttribute("data-review-id");
                confirmDeletion(reviewId);
            });
        });

        // Fermer la modal en cliquant en dehors du contenu
        modal.addEventListener("click", (event) => {
            if (event.target === modal) {
                closeModal();
            }
        });

        // Empêcher la fermeture lors d'un clic dans la modal
        const modalContent = document.querySelector(".modal-content");
        modalContent.addEventListener("click", (event) => {
            event.stopPropagation();
        });

        function closeModal() {
            modal.classList.add("hidden");
            modal.removeAttribute("data-review-id");
        }

        async function saveReviewChanges(reviewId, button) {
            if (confirm("Êtes-vous certain de vouloir modifier cet avis ?")) {
                const reviewItem = document.querySelector(`.review-item[data-review-id='${reviewId}']`);
                const userId = reviewItem.querySelector(".review-user-id").value;
                const productId = reviewItem.querySelector(".review-product-id").value;
                const reviewText = reviewItem.querySelector(".review-text").value;
                const rating = reviewItem.querySelector(".review-rating").value;

                const response = await modifyReview_request(reviewId, reviewText, rating);
                if (response.status === 200) {
                    updateReviewInDOM(response.content);
                    button.classList.add("saved");
                    button.querySelector("ion-icon").setAttribute("name", "checkmark-done-outline");
                    setTimeout(() => {
                        button.querySelector("ion-icon").setAttribute("name", "save-outline");
                        button.classList.remove("saved");
                    }, 1000);
                } else {
                    const errors = response.id?.codes || response.content || ['Erreur inconnue'];
                    showErrorModal(errors);
                }
            }
        }

        async function confirmDeletion(reviewId) {
            if (confirm("Êtes-vous sûr de vouloir supprimer cet avis ?")) {
                const response = await deleteReview_request(reviewId);
                if (response.status === 200) {
                    document.querySelector(`.review-item[data-review-id='${reviewId}']`).remove();
                } else {
                    const errors = response.id?.codes || response.content || ['Erreur inconnue'];
                    showErrorModal(errors);
                }
            }
        }

        function updateReviewInDOM(review) {
            const reviewItem = document.querySelector(`.review-item[data-review-id='${review.id}']`);
            reviewItem.querySelector(".review-user-id").value = review.user_id;
            reviewItem.querySelector(".review-product-id").value = review.product_id;
            reviewItem.querySelector(".review-text").value = review.review;
            reviewItem.querySelector(".review-rating").value = review.rating;
        }

        // Fonctions de communication avec le backend
        async function modifyReview_request(reviewId, review, rating) {
            const formData = new FormData();
            formData.append("review", review);
            formData.append("rating", rating);

            const response = await fetch(`http://localhost:3000/api/v1/reviews/modify/custom/${reviewId}`, {
                method: "PATCH",
                credentials: "include",
                body: formData
            });
            return await response.json();
        }

        async function deleteReview_request(reviewId) {
            const response = await fetch(`http://localhost:3000/api/v1/reviews/delete/custom/${reviewId}`, {
                method: "DELETE",
                credentials: "include",
            });
            return await response.json();
        }
    });

    // Script : Filtres et tri
    document.addEventListener("DOMContentLoaded", () => {
        const filterUserId = document.getElementById("filter-user-id");
        const filterProductId = document.getElementById("filter-product-id");
        const filterRatingMin = document.getElementById("filter-rating-min");
        const filterRatingMax = document.getElementById("filter-rating-max");
        const filterSort = document.getElementById("filter-sort");
        const applyFiltersButton = document.getElementById("apply-filters");
        const reviewList = document.querySelector(".review-list");

        const applyFilters = () => {
            const userId = filterUserId.value.trim();
            const productId = filterProductId.value.trim();
            const ratingMin = filterRatingMin.value === "" ? 0 : parseFloat(filterRatingMin.value);
            const ratingMax = filterRatingMax.value === "" ? 5 : parseFloat(filterRatingMax.value);
            const sortBy = filterSort.value;

            let reviews = Array.from(reviewList.querySelectorAll(".review-item"));

            // Réinitialiser la visibilité de tous les avis
            reviews.forEach(review => {
                review.classList.remove("hidden");
            });

            // Filtrer les avis
            reviews.forEach(review => {
                const reviewUserId = review.querySelector(".review-user-id").value;
                const reviewProductId = review.querySelector(".review-product-id").value;
                const reviewRating = parseFloat(review.querySelector(".review-rating").value);

                const matchesUserId = userId ? reviewUserId === userId : true;
                const matchesProductId = productId ? reviewProductId === productId : true;
                const matchesRating = reviewRating >= ratingMin && reviewRating <= ratingMax;

                if (!(matchesUserId && matchesProductId && matchesRating)) {
                    review.classList.add("hidden");
                }
            });

            // Tri des avis visibles
            let visibleReviews = reviews.filter(review => !review.classList.contains("hidden"));
            visibleReviews.sort((a, b) => {
                if (sortBy === "createdAt") {
                    return new Date(b.getAttribute("data-review-createdAt")) - new Date(a.getAttribute("data-review-createdAt"));
                } else if (sortBy === "rating") {
                    return parseFloat(b.querySelector(".review-rating").value) - parseFloat(a.querySelector(".review-rating").value);
                }
                return 0;
            });

            // Réordonner les éléments dans le DOM
            visibleReviews.forEach(review => reviewList.appendChild(review));
        };

        applyFiltersButton.addEventListener("click", applyFilters);
    });

    // Fonction pour sauvegarder des champs du formulaire dans le localStorage
    function saveFormDataToLocalStorage() {
        const formData = {
            userId: document.getElementById('review-user-id').value,
            productId: document.getElementById('review-product-id').value,
            review: document.getElementById('review-text').value,
            rating: document.getElementById('review-rating').value,
        };
        localStorage.setItem('reviewFormData', JSON.stringify(formData));
    }

    // Chargement des données sauvegardées
    function loadFormDataFromLocalStorage() {
        const savedData = localStorage.getItem('reviewFormData');
        if (savedData) {
            const formData = JSON.parse(savedData);
            document.getElementById('review-user-id').value = formData.userId || '';
            document.getElementById('review-product-id').value = formData.productId || '';
            document.getElementById('review-text').value = formData.review || '';
            document.getElementById('review-rating').value = formData.rating || '';
        }
    }

    // Ajout des écouteurs d'événements pour sauvegarder à chaque modification
    document.addEventListener('DOMContentLoaded', () => {
        loadFormDataFromLocalStorage();

        document.getElementById('review-user-id').addEventListener('input', saveFormDataToLocalStorage);
        document.getElementById('review-product-id').addEventListener('input', saveFormDataToLocalStorage);
        document.getElementById('review-text').addEventListener('input', saveFormDataToLocalStorage);
        document.getElementById('review-rating').addEventListener('input', saveFormDataToLocalStorage);
    });
</script>